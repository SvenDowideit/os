#!/bin/bash
set -e
# help: build and run RancherOS, requires KVM local

cd $(dirname $0)/..

source ./scripts/run-common

# NONQIND is used to remove the --qind arg from the list, and then pass the rest into the container
NONQIND=""

while [ "$#" -gt 0 ]; do
    case $1 in
        --append)
	    NONQIND="$NONQIND $1"
            shift 1
            QEMU_APPEND="${QEMU_APPEND} $1"
            ;;
        --name)
	    NONQIND="$NONQIND $1"
            shift 1
            NAME="$1"
            ;;
        --cloud-config)
	    NONQIND="$NONQIND $1"
            shift 1
            CLOUD_CONFIG="$1" || :
            if [ ! -f ${CLOUD_CONFIG} ]; then
                echo No such file: "'"${CLOUD_CONFIG}"'" 1>&2
                exit 1
            fi
            ;;
        --second-drive)
            SECOND_DRIVE=1
            ;;
        --arch)
	    NONQIND="$NONQIND $1"
            shift 1
            ARCH="$1"
            ;;
        --qemu)
            QEMU=1
            ;;
        --qind)
            QIND=1
            QEMU=0
            ;;
        --kvm)
            KVM=1
            ;;
        --no-format)
            FORMAT=0
            ;;
        --no-rm-usr)
            RM_USR=0
            ;;
        --no-rebuild)
            REBUILD=0
            ;;
        --fresh)
            FRESH=1
            ;;
        --installed)
            ./scripts/create-installed
            INSTALLED=1
            ;;
        --port)
	    NONQIND="$NONQIND $1"
            shift 1
            SSH_PORT="$1"
            ;;
        *)
            break
            ;;
    esac
    if [ "$1" != "--qind" ]; then
	NONQIND="$NONQIND $1"
    fi
    shift 1
done

if [ "$QIND" == "1" ]; then
    docker build -t rancher/qind:${NAME} qind

    NAME=${NAME:-ros-qind}

    if [ "$FRESH" == "1" ]; then
        docker rm -fv ${NAME} >/dev/null 2>&1 || :
    fi
    if ! docker inspect ${NAME} >/dev/null 2>&1; then
        set -x
        docker create --name=${NAME} -it \
		    --device=/dev/kvm:/dev/kvm \
                    rancher/qind:${NAME} \
		    ${NONQIND} \
                    "${@}"
	docker cp scripts ${NAME}:/
	docker cp assets/rancher.key ${NAME}:/assets/
	docker cp assets/rancher.key.pub ${NAME}:/assets/
	docker cp dist/artifacts/vmlinuz ${NAME}:/dist/artifacts/vmlinuz
	docker cp build/initrd ${NAME}:/build/initrd
	docker cp build/initrd.tmp ${NAME}:/build/initrd.tmp
	docker cp bin/ros ${NAME}:/bin/ros
    fi
    exec docker start -ai ${NAME}
fi

declare -A network=(
    ["amd64"]="-net nic,vlan=0,model=virtio -net user,vlan=0,hostfwd=tcp::${SSH_PORT}-:22,hostname=rancher-dev"
    ["arm"]="-netdev user,id=unet,hostfwd=tcp::${SSH_PORT}-:22,hostname=rancher-dev -device virtio-net-device,netdev=unet"
)
network["arm64"]=${network["arm"]}

echo "using SSH_PORT=${SSH_PORT}"
echo "${network["$ARCH"]}"

if [ "$QEMU" == "1" ] && ! which qemu-system-${QEMUARCH}; then
    QEMU=0
fi

if [[ ! -e ${KERNEL} || ! -e ${INITRD_SRC} ]]; then
    echo "Failed to find ${KERNEL} or ${INITRD_SRC}" 1>&2
    exit 1
fi

if [ "$REBUILD" == "1" ] || [ ! -e ${INITRD} ]; then
    cp bin/ros ${INITRD_SRC}/usr/bin/ros
    ./scripts/hash-initrd
    pushd ${INITRD_SRC} >/dev/null
    find . | cpio -H newc -o | gzip -1 > ${INITRD}
    popd >/dev/null
fi

KERNEL_ARGS="${DEFAULT_KERNEL_ARGS} ${QEMU_APPEND}"
if [ "$FORMAT" == "1" ]; then
    KERNEL_ARGS="${KERNEL_ARGS} rancher.state.dev=LABEL=RANCHER_STATE rancher.state.autoformat=[/dev/sda,/dev/vda]"
fi
if [ "$RM_USR" == "1" ]; then
    KERNEL_ARGS="${KERNEL_ARGS} rancher.rm_usr"
fi

if [ "$KVM" == "" ] && [ -c /dev/kvm ] && [ -r /dev/kvm ] && [ -w /dev/kvm ]; then
    KVM=1
fi

if [ "$QEMU" == "1" ]; then

    HD=${BASE}/state/hd.img
    HD2=${BASE}/state/hd2.img
    [ "$FRESH" == "1" ] && rm -f ${HD} ${HD2} >/dev/null 2>&1 || :

    if [ ! -e ${HD} ]; then
        mkdir -p $(dirname ${HD})
        qemu-img create -f qcow2 -o size=10G ${HD}
    fi

    if [ "$SECOND_DRIVE" == "1" ]; then
        qemu-img create -f qcow2 -o size=10G ${HD2}
        SECOND_DRIVE_ENABLE=$(eval "${hd["$ARCH"]} ${HD2}")
    fi

    CCROOT=${BUILD}/cloud-config
    rm -rf ${CCROOT}
    mkdir -p ${CCROOT}

    USER_DATA=${CCROOT}/openstack/latest/user_data
    mkdir -p $(dirname ${USER_DATA})
    rm -f ${USER_DATA} || :
    if [ -n "$CLOUD_CONFIG" ]; then
        cat ${CLOUD_CONFIG} > ${USER_DATA}
    else
        echo "#cloud-config" > ${USER_DATA}
        echo "ssh_authorized_keys:" >> ${USER_DATA}
        echo "- $(<${BASE}/assets/rancher.key.pub)" >> ${USER_DATA}
    fi

    CPU=${cpu["$ARCH"]}
    if [ "$KVM" == "1" ] && [ "$ARCH" == "$HOST_ARCH" ]; then
        KVM_ENABLE="-enable-kvm"
        CPU="-cpu host"
    fi
    HOME=${HOME:-/}
    if [ "$INSTALLED" != "1" ]; then
	INSTALLED_ARGS="-kernel ${KERNEL} -initrd ${INITRD}"
    fi
	set -x
	exec qemu-system-${QEMUARCH} -serial stdio \
	    -rtc base=utc,clock=host \
	    ${KVM_ENABLE} \
	    ${CPU} \
	    ${machine["$ARCH"]} \
            ${INSTALLED_ARGS} \
	    -append "${KERNEL_ARGS}" \
	    -m 2048 \
	    ${network["$ARCH"]} \
	    $(eval "${hd["$ARCH"]} ${HD}") \
	    ${SECOND_DRIVE_ENABLE} \
	    -smp 1 \
	    -nographic \
	    -display none \
	    -fsdev local,security_model=passthrough,readonly,id=fsdev0,path=${CCROOT} \
	    -device virtio-9p-pci,id=fs0,fsdev=fsdev0,mount_tag=config-2 \
	    -fsdev local,security_model=none,id=fsdev1,path=${HOME} \
	    -device virtio-9p-pci,id=fs1,fsdev=fsdev1,mount_tag=home \
	    ${QEMU_ARGS} \
	    "${@}"

else
    exit 42
fi
